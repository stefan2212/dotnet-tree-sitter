//----------------------
// <auto-generated>
//     Generated by node_generator.py
//     source: langs-native/tree-sitter-java/src/node-types.json
// </auto-generated>
//----------------------

#nullable enable

using System.Linq;

namespace TreeSitter.Java.Nodes {

    public abstract class JavaLanguageNode
    {
        public static JavaLanguageNode FromNode(TreeSitter.Node node) {
            if (node is null) throw new System.ArgumentNullException(nameof(node));
            if (!node.IsNamed) return new JavaLanguageNodeTerminalNode(node);
            switch (node.Kind) {
                case "compact_constructor_declaration": return new CompactConstructorDeclaration(node);
                case "explicit_constructor_invocation": return new ExplicitConstructorInvocation(node);
                case "class_literal": return new ClassLiteral(node);
                case "hex_integer_literal": return new HexIntegerLiteral(node);
                case "finally_clause": return new FinallyClause(node);
                case "annotated_type": return new AnnotatedType(node);
                case "lambda_expression": return new LambdaExpression(node);
                case "requires_modifier": return new RequiresModifier(node);
                case "assignment_expression": return new AssignmentExpression(node);
                case "provides_module_directive": return new ProvidesModuleDirective(node);
                case "assert_statement": return new AssertStatement(node);
                case "modifiers": return new Modifiers(node);
                case "program": return new Program(node);
                case "annotation_type_body": return new AnnotationTypeBody(node);
                case "element_value_array_initializer": return new ElementValueArrayInitializer(node);
                case "update_expression": return new UpdateExpression(node);
                case "switch_rule": return new SwitchRule(node);
                case "type_bound": return new TypeBound(node);
                case "synchronized_statement": return new SynchronizedStatement(node);
                case "binary_integer_literal": return new BinaryIntegerLiteral(node);
                case "type_identifier": return new TypeIdentifier(node);
                case "catch_type": return new CatchType(node);
                case "parenthesized_expression": return new ParenthesizedExpression(node);
                case "object_creation_expression": return new ObjectCreationExpression(node);
                case "annotation_argument_list": return new AnnotationArgumentList(node);
                case "decimal_integer_literal": return new DecimalIntegerLiteral(node);
                case "enum_body": return new EnumBody(node);
                case "superclass": return new Superclass(node);
                case "generic_type": return new GenericType(node);
                case "dimensions": return new Dimensions(node);
                case "interface_body": return new InterfaceBody(node);
                case "module_body": return new ModuleBody(node);
                case "octal_integer_literal": return new OctalIntegerLiteral(node);
                case "marker_annotation": return new MarkerAnnotation(node);
                case "enum_body_declarations": return new EnumBodyDeclarations(node);
                case "class_body": return new ClassBody(node);
                case "element_value_pair": return new ElementValuePair(node);
                case "extends_interfaces": return new ExtendsInterfaces(node);
                case "super_interfaces": return new SuperInterfaces(node);
                case "this": return new This(node);
                case "instanceof_expression": return new InstanceofExpression(node);
                case "field_declaration": return new FieldDeclaration(node);
                case "hex_floating_point_literal": return new HexFloatingPointLiteral(node);
                case "opens_module_directive": return new OpensModuleDirective(node);
                case "enum_declaration": return new EnumDeclaration(node);
                case "resource_specification": return new ResourceSpecification(node);
                case "super": return new Super(node);
                case "enhanced_for_statement": return new EnhancedForStatement(node);
                case "import_declaration": return new ImportDeclaration(node);
                case "labeled_statement": return new LabeledStatement(node);
                case "switch_block_statement_group": return new SwitchBlockStatementGroup(node);
                case "interface_declaration": return new InterfaceDeclaration(node);
                case "character_literal": return new CharacterLiteral(node);
                case "switch_label": return new SwitchLabel(node);
                case "binary_expression": return new BinaryExpression(node);
                case "scoped_type_identifier": return new ScopedTypeIdentifier(node);
                case "asterisk": return new Asterisk(node);
                case "array_access": return new ArrayAccess(node);
                case "unary_expression": return new UnaryExpression(node);
                case "requires_module_directive": return new RequiresModuleDirective(node);
                case "null_literal": return new NullLiteral(node);
                case "return_statement": return new ReturnStatement(node);
                case "throw_statement": return new ThrowStatement(node);
                case "while_statement": return new WhileStatement(node);
                case "argument_list": return new ArgumentList(node);
                case "floating_point_type": return new FloatingPointType(node);
                case "scoped_identifier": return new ScopedIdentifier(node);
                case "static_initializer": return new StaticInitializer(node);
                case "decimal_floating_point_literal": return new DecimalFloatingPointLiteral(node);
                case "switch_block": return new SwitchBlock(node);
                case "spread_parameter": return new SpreadParameter(node);
                case "for_statement": return new ForStatement(node);
                case "identifier": return new Identifier(node);
                case "class_declaration": return new ClassDeclaration(node);
                case "type_parameter": return new TypeParameter(node);
                case "receiver_parameter": return new ReceiverParameter(node);
                case "type_arguments": return new TypeArguments(node);
                case "switch_expression": return new SwitchExpression(node);
                case "annotation_type_element_declaration": return new AnnotationTypeElementDeclaration(node);
                case "module_declaration": return new ModuleDeclaration(node);
                case "exports_module_directive": return new ExportsModuleDirective(node);
                case "break_statement": return new BreakStatement(node);
                case "type_parameters": return new TypeParameters(node);
                case "wildcard": return new Wildcard(node);
                case "catch_formal_parameter": return new CatchFormalParameter(node);
                case "constant_declaration": return new ConstantDeclaration(node);
                case "throws": return new Throws(node);
                case "yield_statement": return new YieldStatement(node);
                case "block": return new Block(node);
                case "formal_parameters": return new FormalParameters(node);
                case "method_reference": return new MethodReference(node);
                case "multiline_string_fragment": return new MultilineStringFragment(node);
                case "do_statement": return new DoStatement(node);
                case "method_declaration": return new MethodDeclaration(node);
                case "true": return new True(node);
                case "condition": return new Condition(node);
                case "package_declaration": return new PackageDeclaration(node);
                case "uses_module_directive": return new UsesModuleDirective(node);
                case "array_creation_expression": return new ArrayCreationExpression(node);
                case "resource": return new Resource(node);
                case "method_invocation": return new MethodInvocation(node);
                case "array_initializer": return new ArrayInitializer(node);
                case "constructor_body": return new ConstructorBody(node);
                case "escape_sequence": return new EscapeSequence(node);
                case "void_type": return new VoidType(node);
                case "inferred_parameters": return new InferredParameters(node);
                case "type_list": return new TypeList(node);
                case "annotation_type_declaration": return new AnnotationTypeDeclaration(node);
                case "if_statement": return new IfStatement(node);
                case "try_with_resources_statement": return new TryWithResourcesStatement(node);
                case "string_fragment": return new StringFragment(node);
                case "permits": return new Permits(node);
                case "boolean_type": return new BooleanType(node);
                case "try_statement": return new TryStatement(node);
                case "continue_statement": return new ContinueStatement(node);
                case "record_declaration": return new RecordDeclaration(node);
                case "array_type": return new ArrayType(node);
                case "enum_constant": return new EnumConstant(node);
                case "annotation": return new Annotation(node);
                case "expression_statement": return new ExpressionStatement(node);
                case "formal_parameter": return new FormalParameter(node);
                case "cast_expression": return new CastExpression(node);
                case "false": return new False(node);
                case "field_access": return new FieldAccess(node);
                case "dimensions_expr": return new DimensionsExpr(node);
                case "catch_clause": return new CatchClause(node);
                case "local_variable_declaration": return new LocalVariableDeclaration(node);
                case "line_comment": return new LineComment(node);
                case "variable_declarator": return new VariableDeclarator(node);
                case "string_literal": return new StringLiteral(node);
                case "ternary_expression": return new TernaryExpression(node);
                case "constructor_declaration": return new ConstructorDeclaration(node);
                case "integral_type": return new IntegralType(node);
                case "block_comment": return new BlockComment(node);
                case "ERROR": return new ErrorNode(node);
                default: throw new System.ArgumentException("unknown node type: " + node.Kind, nameof(node));
            }
        }

    
        public string Kind { get; set; }

        protected JavaLanguageNode(TreeSitter.Node node)
        {
            Kind = node.Kind;
        }
    }
    
    public class JavaLanguageNodeTerminalNode : JavaLanguageNode
    {
        public JavaLanguageNodeTerminalNode(TreeSitter.Node node) : base(node)
        {
        }
    }
    
    public class ErrorNode : JavaLanguageNode
    {
        public ErrorNode(TreeSitter.Node node) : base(node)
        {
        }
    }

    public interface ILiteral : PrimaryExpression
    {
    }

    public interface ISimpleType : IUnannotatedType
    {
    }

    public interface IType
    {
    }

    public interface IUnannotatedType : IType
    {
    }

    public interface Comment
    {
    }

    public interface Declaration : Statement
    {
    }

    public interface Expression
    {
    }

    public interface ModuleDirective
    {
    }

    public interface PrimaryExpression : Expression
    {
    }

    public interface Statement
    {
    }

    public class AnnotatedType : JavaLanguageNode, IType
    {
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public AnnotatedType(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "annotated_type");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class Annotation : JavaLanguageNode
    {
        public AnnotationArgumentList Arguments { get; set; }
        public JavaLanguageNode Name { get; set; }
        public Annotation(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "annotation");
            
            this.Arguments = new AnnotationArgumentList(node.ChildByFieldName("arguments"));
            this.Name = (JavaLanguageNode) JavaLanguageNode.FromNode(node.ChildByFieldName("name"))!;
        }
    }

    public class AnnotationArgumentList : JavaLanguageNode
    {
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public AnnotationArgumentList(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "annotation_argument_list");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class AnnotationTypeBody : JavaLanguageNode
    {
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public AnnotationTypeBody(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "annotation_type_body");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class AnnotationTypeDeclaration : JavaLanguageNode, Declaration
    {
        public AnnotationTypeBody Body { get; set; }
        public Identifier Name { get; set; }
        public System.Collections.Generic.List<Modifiers> Children { get; set; }
        public AnnotationTypeDeclaration(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "annotation_type_declaration");
            
            this.Body = new AnnotationTypeBody(node.ChildByFieldName("body"));
            this.Name = new Identifier(node.ChildByFieldName("name"));
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Modifiers(x)).ToList();
        }
    }

    public class AnnotationTypeElementDeclaration : JavaLanguageNode
    {
        public Dimensions? Dimensions { get; set; }
        public Identifier Name { get; set; }
        public IUnannotatedType Type { get; set; }
        public JavaLanguageNode? Value { get; set; }
        public System.Collections.Generic.List<Modifiers> Children { get; set; }
        public AnnotationTypeElementDeclaration(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "annotation_type_element_declaration");
            
            {
                var tmp = node.ChildByFieldName("dimensions");
                this.Dimensions = tmp is null ? null : new Dimensions(tmp);
            }
            this.Name = new Identifier(node.ChildByFieldName("name"));
            this.Type = (IUnannotatedType) JavaLanguageNode.FromNode(node.ChildByFieldName("type"))!;
            {
                var tmp = node.ChildByFieldName("value");
                this.Value = tmp is null ? null : (JavaLanguageNode) JavaLanguageNode.FromNode(tmp);
            }
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Modifiers(x)).ToList();
        }
    }

    public class ArgumentList : JavaLanguageNode
    {
        public System.Collections.Generic.List<Expression> Children { get; set; }
        public ArgumentList(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "argument_list");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (Expression) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ArrayAccess : JavaLanguageNode, PrimaryExpression
    {
        public PrimaryExpression Array { get; set; }
        public Expression Index { get; set; }
        public ArrayAccess(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "array_access");
            
            this.Array = (PrimaryExpression) JavaLanguageNode.FromNode(node.ChildByFieldName("array"))!;
            this.Index = (Expression) JavaLanguageNode.FromNode(node.ChildByFieldName("index"))!;
        }
    }

    public class ArrayCreationExpression : JavaLanguageNode, PrimaryExpression
    {
        public System.Collections.Generic.List<JavaLanguageNode> Dimensions { get; set; }
        public ISimpleType Type { get; set; }
        public ArrayInitializer? Value { get; set; }
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public ArrayCreationExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "array_creation_expression");
            
            this.Dimensions = node.ChildrenByFieldName("dimensions").Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
            this.Type = (ISimpleType) JavaLanguageNode.FromNode(node.ChildByFieldName("type"))!;
            {
                var tmp = node.ChildByFieldName("value");
                this.Value = tmp is null ? null : new ArrayInitializer(tmp);
            }
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ArrayInitializer : JavaLanguageNode
    {
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public ArrayInitializer(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "array_initializer");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ArrayType : JavaLanguageNode, IUnannotatedType
    {
        public Dimensions Dimensions { get; set; }
        public IUnannotatedType Element { get; set; }
        public ArrayType(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "array_type");
            
            this.Dimensions = new Dimensions(node.ChildByFieldName("dimensions"));
            this.Element = (IUnannotatedType) JavaLanguageNode.FromNode(node.ChildByFieldName("element"))!;
        }
    }

    public class AssertStatement : JavaLanguageNode, Statement
    {
        public System.Collections.Generic.List<Expression> Children { get; set; }
        public AssertStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "assert_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (Expression) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class AssignmentExpression : JavaLanguageNode, Expression
    {
        public JavaLanguageNode Left { get; set; }
        public JavaLanguageNodeTerminalNode Operator { get; set; }
        public Expression Right { get; set; }
        public AssignmentExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "assignment_expression");
            
            this.Left = (JavaLanguageNode) JavaLanguageNode.FromNode(node.ChildByFieldName("left"))!;
            this.Operator = new JavaLanguageNodeTerminalNode(node.ChildByFieldName("operator"));
            this.Right = (Expression) JavaLanguageNode.FromNode(node.ChildByFieldName("right"))!;
        }
    }

    public class Asterisk : JavaLanguageNode
    {
        public Asterisk(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "asterisk");
            
        }
    }

    public class BinaryExpression : JavaLanguageNode, Expression
    {
        public Expression Left { get; set; }
        public JavaLanguageNodeTerminalNode Operator { get; set; }
        public Expression Right { get; set; }
        public BinaryExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "binary_expression");
            
            this.Left = (Expression) JavaLanguageNode.FromNode(node.ChildByFieldName("left"))!;
            this.Operator = new JavaLanguageNodeTerminalNode(node.ChildByFieldName("operator"));
            this.Right = (Expression) JavaLanguageNode.FromNode(node.ChildByFieldName("right"))!;
        }
    }

    public class Block : JavaLanguageNode, Statement
    {
        public System.Collections.Generic.List<Statement> Children { get; set; }
        public Block(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "block");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (Statement) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class BreakStatement : JavaLanguageNode, Statement
    {
        public System.Collections.Generic.List<Identifier> Children { get; set; }
        public BreakStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "break_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Identifier(x)).ToList();
        }
    }

    public class CastExpression : JavaLanguageNode, Expression
    {
        public System.Collections.Generic.List<IType> Type { get; set; }
        public Expression Value { get; set; }
        public CastExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "cast_expression");
            
            this.Type = node.ChildrenByFieldName("type").Select(x => (IType) JavaLanguageNode.FromNode(x)!).ToList();
            this.Value = (Expression) JavaLanguageNode.FromNode(node.ChildByFieldName("value"))!;
        }
    }

    public class CatchClause : JavaLanguageNode
    {
        public Block Body { get; set; }
        public System.Collections.Generic.List<CatchFormalParameter> Children { get; set; }
        public CatchClause(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "catch_clause");
            
            this.Body = new Block(node.ChildByFieldName("body"));
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new CatchFormalParameter(x)).ToList();
        }
    }

    public class CatchFormalParameter : JavaLanguageNode
    {
        public Dimensions? Dimensions { get; set; }
        public Identifier Name { get; set; }
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public CatchFormalParameter(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "catch_formal_parameter");
            
            {
                var tmp = node.ChildByFieldName("dimensions");
                this.Dimensions = tmp is null ? null : new Dimensions(tmp);
            }
            this.Name = new Identifier(node.ChildByFieldName("name"));
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class CatchType : JavaLanguageNode
    {
        public System.Collections.Generic.List<IUnannotatedType> Children { get; set; }
        public CatchType(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "catch_type");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (IUnannotatedType) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ClassBody : JavaLanguageNode
    {
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public ClassBody(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "class_body");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ClassDeclaration : JavaLanguageNode, Declaration
    {
        public ClassBody Body { get; set; }
        public SuperInterfaces? Interfaces { get; set; }
        public Identifier Name { get; set; }
        public Permits? Permits { get; set; }
        public Superclass? Superclass { get; set; }
        public TypeParameters? TypeParameters { get; set; }
        public System.Collections.Generic.List<Modifiers> Children { get; set; }
        public ClassDeclaration(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "class_declaration");
            
            this.Body = new ClassBody(node.ChildByFieldName("body"));
            {
                var tmp = node.ChildByFieldName("interfaces");
                this.Interfaces = tmp is null ? null : new SuperInterfaces(tmp);
            }
            this.Name = new Identifier(node.ChildByFieldName("name"));
            {
                var tmp = node.ChildByFieldName("permits");
                this.Permits = tmp is null ? null : new Permits(tmp);
            }
            {
                var tmp = node.ChildByFieldName("superclass");
                this.Superclass = tmp is null ? null : new Superclass(tmp);
            }
            {
                var tmp = node.ChildByFieldName("type_parameters");
                this.TypeParameters = tmp is null ? null : new TypeParameters(tmp);
            }
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Modifiers(x)).ToList();
        }
    }

    public class ClassLiteral : JavaLanguageNode, PrimaryExpression
    {
        public System.Collections.Generic.List<IUnannotatedType> Children { get; set; }
        public ClassLiteral(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "class_literal");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (IUnannotatedType) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class CompactConstructorDeclaration : JavaLanguageNode
    {
        public Block Body { get; set; }
        public Identifier Name { get; set; }
        public System.Collections.Generic.List<Modifiers> Children { get; set; }
        public CompactConstructorDeclaration(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "compact_constructor_declaration");
            
            this.Body = new Block(node.ChildByFieldName("body"));
            this.Name = new Identifier(node.ChildByFieldName("name"));
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Modifiers(x)).ToList();
        }
    }

    public class Condition : JavaLanguageNode
    {
        public System.Collections.Generic.List<Expression> Children { get; set; }
        public Condition(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "condition");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (Expression) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ConstantDeclaration : JavaLanguageNode
    {
        public System.Collections.Generic.List<VariableDeclarator> Declarator { get; set; }
        public IUnannotatedType Type { get; set; }
        public System.Collections.Generic.List<Modifiers> Children { get; set; }
        public ConstantDeclaration(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "constant_declaration");
            
            this.Declarator = node.ChildrenByFieldName("declarator").Select(x => new VariableDeclarator(x)).ToList();
            this.Type = (IUnannotatedType) JavaLanguageNode.FromNode(node.ChildByFieldName("type"))!;
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Modifiers(x)).ToList();
        }
    }

    public class ConstructorBody : JavaLanguageNode
    {
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public ConstructorBody(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "constructor_body");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ConstructorDeclaration : JavaLanguageNode
    {
        public ConstructorBody Body { get; set; }
        public Identifier Name { get; set; }
        public FormalParameters Parameters { get; set; }
        public TypeParameters? TypeParameters { get; set; }
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public ConstructorDeclaration(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "constructor_declaration");
            
            this.Body = new ConstructorBody(node.ChildByFieldName("body"));
            this.Name = new Identifier(node.ChildByFieldName("name"));
            this.Parameters = new FormalParameters(node.ChildByFieldName("parameters"));
            {
                var tmp = node.ChildByFieldName("type_parameters");
                this.TypeParameters = tmp is null ? null : new TypeParameters(tmp);
            }
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ContinueStatement : JavaLanguageNode, Statement
    {
        public System.Collections.Generic.List<Identifier> Children { get; set; }
        public ContinueStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "continue_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Identifier(x)).ToList();
        }
    }

    public class Dimensions : JavaLanguageNode
    {
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public Dimensions(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "dimensions");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class DimensionsExpr : JavaLanguageNode
    {
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public DimensionsExpr(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "dimensions_expr");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class DoStatement : JavaLanguageNode, Statement
    {
        public Statement Body { get; set; }
        public ParenthesizedExpression Condition { get; set; }
        public DoStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "do_statement");
            
            this.Body = (Statement) JavaLanguageNode.FromNode(node.ChildByFieldName("body"))!;
            this.Condition = new ParenthesizedExpression(node.ChildByFieldName("condition"));
        }
    }

    public class ElementValueArrayInitializer : JavaLanguageNode
    {
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public ElementValueArrayInitializer(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "element_value_array_initializer");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ElementValuePair : JavaLanguageNode
    {
        public Identifier Key { get; set; }
        public JavaLanguageNode Value { get; set; }
        public ElementValuePair(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "element_value_pair");
            
            this.Key = new Identifier(node.ChildByFieldName("key"));
            this.Value = (JavaLanguageNode) JavaLanguageNode.FromNode(node.ChildByFieldName("value"))!;
        }
    }

    public class EnhancedForStatement : JavaLanguageNode, Statement
    {
        public Statement Body { get; set; }
        public Dimensions? Dimensions { get; set; }
        public Identifier Name { get; set; }
        public IUnannotatedType Type { get; set; }
        public Expression Value { get; set; }
        public System.Collections.Generic.List<Modifiers> Children { get; set; }
        public EnhancedForStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "enhanced_for_statement");
            
            this.Body = (Statement) JavaLanguageNode.FromNode(node.ChildByFieldName("body"))!;
            {
                var tmp = node.ChildByFieldName("dimensions");
                this.Dimensions = tmp is null ? null : new Dimensions(tmp);
            }
            this.Name = new Identifier(node.ChildByFieldName("name"));
            this.Type = (IUnannotatedType) JavaLanguageNode.FromNode(node.ChildByFieldName("type"))!;
            this.Value = (Expression) JavaLanguageNode.FromNode(node.ChildByFieldName("value"))!;
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Modifiers(x)).ToList();
        }
    }

    public class EnumBody : JavaLanguageNode
    {
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public EnumBody(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "enum_body");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class EnumBodyDeclarations : JavaLanguageNode
    {
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public EnumBodyDeclarations(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "enum_body_declarations");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class EnumConstant : JavaLanguageNode
    {
        public ArgumentList? Arguments { get; set; }
        public ClassBody? Body { get; set; }
        public Identifier Name { get; set; }
        public System.Collections.Generic.List<Modifiers> Children { get; set; }
        public EnumConstant(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "enum_constant");
            
            {
                var tmp = node.ChildByFieldName("arguments");
                this.Arguments = tmp is null ? null : new ArgumentList(tmp);
            }
            {
                var tmp = node.ChildByFieldName("body");
                this.Body = tmp is null ? null : new ClassBody(tmp);
            }
            this.Name = new Identifier(node.ChildByFieldName("name"));
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Modifiers(x)).ToList();
        }
    }

    public class EnumDeclaration : JavaLanguageNode, Declaration
    {
        public EnumBody Body { get; set; }
        public SuperInterfaces? Interfaces { get; set; }
        public Identifier Name { get; set; }
        public System.Collections.Generic.List<Modifiers> Children { get; set; }
        public EnumDeclaration(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "enum_declaration");
            
            this.Body = new EnumBody(node.ChildByFieldName("body"));
            {
                var tmp = node.ChildByFieldName("interfaces");
                this.Interfaces = tmp is null ? null : new SuperInterfaces(tmp);
            }
            this.Name = new Identifier(node.ChildByFieldName("name"));
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Modifiers(x)).ToList();
        }
    }

    public class ExplicitConstructorInvocation : JavaLanguageNode
    {
        public ArgumentList Arguments { get; set; }
        public JavaLanguageNode Constructor { get; set; }
        public PrimaryExpression? Object { get; set; }
        public TypeArguments? TypeArguments { get; set; }
        public ExplicitConstructorInvocation(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "explicit_constructor_invocation");
            
            this.Arguments = new ArgumentList(node.ChildByFieldName("arguments"));
            this.Constructor = (JavaLanguageNode) JavaLanguageNode.FromNode(node.ChildByFieldName("constructor"))!;
            {
                var tmp = node.ChildByFieldName("object");
                this.Object = tmp is null ? null : (PrimaryExpression) JavaLanguageNode.FromNode(tmp);
            }
            {
                var tmp = node.ChildByFieldName("type_arguments");
                this.TypeArguments = tmp is null ? null : new TypeArguments(tmp);
            }
        }
    }

    public class ExportsModuleDirective : JavaLanguageNode, ModuleDirective
    {
        public System.Collections.Generic.List<JavaLanguageNode> Modules { get; set; }
        public JavaLanguageNode Package { get; set; }
        public ExportsModuleDirective(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "exports_module_directive");
            
            this.Modules = node.ChildrenByFieldName("modules").Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
            this.Package = (JavaLanguageNode) JavaLanguageNode.FromNode(node.ChildByFieldName("package"))!;
        }
    }

    public class ExpressionStatement : JavaLanguageNode, Statement
    {
        public System.Collections.Generic.List<Expression> Children { get; set; }
        public ExpressionStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "expression_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (Expression) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ExtendsInterfaces : JavaLanguageNode
    {
        public System.Collections.Generic.List<TypeList> Children { get; set; }
        public ExtendsInterfaces(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "extends_interfaces");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new TypeList(x)).ToList();
        }
    }

    public class FieldAccess : JavaLanguageNode, PrimaryExpression
    {
        public JavaLanguageNode Field { get; set; }
        public JavaLanguageNode Object { get; set; }
        public System.Collections.Generic.List<Super> Children { get; set; }
        public FieldAccess(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "field_access");
            
            this.Field = (JavaLanguageNode) JavaLanguageNode.FromNode(node.ChildByFieldName("field"))!;
            this.Object = (JavaLanguageNode) JavaLanguageNode.FromNode(node.ChildByFieldName("object"))!;
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Super(x)).ToList();
        }
    }

    public class FieldDeclaration : JavaLanguageNode
    {
        public System.Collections.Generic.List<VariableDeclarator> Declarator { get; set; }
        public IUnannotatedType Type { get; set; }
        public System.Collections.Generic.List<Modifiers> Children { get; set; }
        public FieldDeclaration(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "field_declaration");
            
            this.Declarator = node.ChildrenByFieldName("declarator").Select(x => new VariableDeclarator(x)).ToList();
            this.Type = (IUnannotatedType) JavaLanguageNode.FromNode(node.ChildByFieldName("type"))!;
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Modifiers(x)).ToList();
        }
    }

    public class FinallyClause : JavaLanguageNode
    {
        public System.Collections.Generic.List<Block> Children { get; set; }
        public FinallyClause(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "finally_clause");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Block(x)).ToList();
        }
    }

    public class FloatingPointType : JavaLanguageNode, ISimpleType
    {
        public FloatingPointType(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "floating_point_type");
            
        }
    }

    public class ForStatement : JavaLanguageNode, Statement
    {
        public Statement Body { get; set; }
        public Expression? Condition { get; set; }
        public System.Collections.Generic.List<JavaLanguageNode> Init { get; set; }
        public System.Collections.Generic.List<Expression> Update { get; set; }
        public ForStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "for_statement");
            
            this.Body = (Statement) JavaLanguageNode.FromNode(node.ChildByFieldName("body"))!;
            {
                var tmp = node.ChildByFieldName("condition");
                this.Condition = tmp is null ? null : (Expression) JavaLanguageNode.FromNode(tmp);
            }
            this.Init = node.ChildrenByFieldName("init").Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
            this.Update = node.ChildrenByFieldName("update").Select(x => (Expression) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class FormalParameter : JavaLanguageNode
    {
        public Dimensions? Dimensions { get; set; }
        public Identifier Name { get; set; }
        public IUnannotatedType Type { get; set; }
        public System.Collections.Generic.List<Modifiers> Children { get; set; }
        public FormalParameter(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "formal_parameter");
            
            {
                var tmp = node.ChildByFieldName("dimensions");
                this.Dimensions = tmp is null ? null : new Dimensions(tmp);
            }
            this.Name = new Identifier(node.ChildByFieldName("name"));
            this.Type = (IUnannotatedType) JavaLanguageNode.FromNode(node.ChildByFieldName("type"))!;
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Modifiers(x)).ToList();
        }
    }

    public class FormalParameters : JavaLanguageNode
    {
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public FormalParameters(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "formal_parameters");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class GenericType : JavaLanguageNode, ISimpleType
    {
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public GenericType(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "generic_type");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class IfStatement : JavaLanguageNode, Statement
    {
        public Statement? Alternative { get; set; }
        public Condition Condition { get; set; }
        public Statement Consequence { get; set; }
        public IfStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "if_statement");
            
            {
                var tmp = node.ChildByFieldName("alternative");
                this.Alternative = tmp is null ? null : (Statement) JavaLanguageNode.FromNode(tmp);
            }
            this.Condition = new Condition(node.ChildByFieldName("condition"));
            this.Consequence = (Statement) JavaLanguageNode.FromNode(node.ChildByFieldName("consequence"))!;
        }
    }

    public class ImportDeclaration : JavaLanguageNode, Declaration
    {
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public ImportDeclaration(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "import_declaration");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class InferredParameters : JavaLanguageNode
    {
        public System.Collections.Generic.List<Identifier> Children { get; set; }
        public InferredParameters(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "inferred_parameters");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Identifier(x)).ToList();
        }
    }

    public class InstanceofExpression : JavaLanguageNode, Expression
    {
        public Expression Left { get; set; }
        public Identifier? Name { get; set; }
        public IType Right { get; set; }
        public InstanceofExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "instanceof_expression");
            
            this.Left = (Expression) JavaLanguageNode.FromNode(node.ChildByFieldName("left"))!;
            {
                var tmp = node.ChildByFieldName("name");
                this.Name = tmp is null ? null : new Identifier(tmp);
            }
            this.Right = (IType) JavaLanguageNode.FromNode(node.ChildByFieldName("right"))!;
        }
    }

    public class IntegralType : JavaLanguageNode, ISimpleType
    {
        public IntegralType(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "integral_type");
            
        }
    }

    public class InterfaceBody : JavaLanguageNode
    {
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public InterfaceBody(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "interface_body");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class InterfaceDeclaration : JavaLanguageNode, Declaration
    {
        public InterfaceBody Body { get; set; }
        public Identifier Name { get; set; }
        public Permits? Permits { get; set; }
        public TypeParameters? TypeParameters { get; set; }
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public InterfaceDeclaration(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "interface_declaration");
            
            this.Body = new InterfaceBody(node.ChildByFieldName("body"));
            this.Name = new Identifier(node.ChildByFieldName("name"));
            {
                var tmp = node.ChildByFieldName("permits");
                this.Permits = tmp is null ? null : new Permits(tmp);
            }
            {
                var tmp = node.ChildByFieldName("type_parameters");
                this.TypeParameters = tmp is null ? null : new TypeParameters(tmp);
            }
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class LabeledStatement : JavaLanguageNode, Statement
    {
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public LabeledStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "labeled_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class LambdaExpression : JavaLanguageNode, Expression
    {
        public JavaLanguageNode Body { get; set; }
        public JavaLanguageNode Parameters { get; set; }
        public LambdaExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "lambda_expression");
            
            this.Body = (JavaLanguageNode) JavaLanguageNode.FromNode(node.ChildByFieldName("body"))!;
            this.Parameters = (JavaLanguageNode) JavaLanguageNode.FromNode(node.ChildByFieldName("parameters"))!;
        }
    }

    public class LocalVariableDeclaration : JavaLanguageNode, Statement
    {
        public System.Collections.Generic.List<VariableDeclarator> Declarator { get; set; }
        public IUnannotatedType Type { get; set; }
        public System.Collections.Generic.List<Modifiers> Children { get; set; }
        public LocalVariableDeclaration(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "local_variable_declaration");
            
            this.Declarator = node.ChildrenByFieldName("declarator").Select(x => new VariableDeclarator(x)).ToList();
            this.Type = (IUnannotatedType) JavaLanguageNode.FromNode(node.ChildByFieldName("type"))!;
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Modifiers(x)).ToList();
        }
    }

    public class MarkerAnnotation : JavaLanguageNode
    {
        public JavaLanguageNode Name { get; set; }
        public MarkerAnnotation(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "marker_annotation");
            
            this.Name = (JavaLanguageNode) JavaLanguageNode.FromNode(node.ChildByFieldName("name"))!;
        }
    }

    public class MethodDeclaration : JavaLanguageNode
    {
        public Block? Body { get; set; }
        public Dimensions? Dimensions { get; set; }
        public Identifier Name { get; set; }
        public FormalParameters Parameters { get; set; }
        public IUnannotatedType Type { get; set; }
        public TypeParameters? TypeParameters { get; set; }
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public MethodDeclaration(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "method_declaration");
            
            {
                var tmp = node.ChildByFieldName("body");
                this.Body = tmp is null ? null : new Block(tmp);
            }
            {
                var tmp = node.ChildByFieldName("dimensions");
                this.Dimensions = tmp is null ? null : new Dimensions(tmp);
            }
            this.Name = new Identifier(node.ChildByFieldName("name"));
            this.Parameters = new FormalParameters(node.ChildByFieldName("parameters"));
            this.Type = (IUnannotatedType) JavaLanguageNode.FromNode(node.ChildByFieldName("type"))!;
            {
                var tmp = node.ChildByFieldName("type_parameters");
                this.TypeParameters = tmp is null ? null : new TypeParameters(tmp);
            }
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class MethodInvocation : JavaLanguageNode, PrimaryExpression
    {
        public ArgumentList Arguments { get; set; }
        public Identifier Name { get; set; }
        public JavaLanguageNode? Object { get; set; }
        public TypeArguments? TypeArguments { get; set; }
        public System.Collections.Generic.List<Super> Children { get; set; }
        public MethodInvocation(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "method_invocation");
            
            this.Arguments = new ArgumentList(node.ChildByFieldName("arguments"));
            this.Name = new Identifier(node.ChildByFieldName("name"));
            {
                var tmp = node.ChildByFieldName("object");
                this.Object = tmp is null ? null : (JavaLanguageNode) JavaLanguageNode.FromNode(tmp);
            }
            {
                var tmp = node.ChildByFieldName("type_arguments");
                this.TypeArguments = tmp is null ? null : new TypeArguments(tmp);
            }
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Super(x)).ToList();
        }
    }

    public class MethodReference : JavaLanguageNode, PrimaryExpression
    {
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public MethodReference(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "method_reference");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class Modifiers : JavaLanguageNode
    {
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public Modifiers(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "modifiers");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ModuleBody : JavaLanguageNode
    {
        public System.Collections.Generic.List<ModuleDirective> Children { get; set; }
        public ModuleBody(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "module_body");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (ModuleDirective) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ModuleDeclaration : JavaLanguageNode, Declaration
    {
        public ModuleBody Body { get; set; }
        public JavaLanguageNode Name { get; set; }
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public ModuleDeclaration(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "module_declaration");
            
            this.Body = new ModuleBody(node.ChildByFieldName("body"));
            this.Name = (JavaLanguageNode) JavaLanguageNode.FromNode(node.ChildByFieldName("name"))!;
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class MultilineStringFragment : JavaLanguageNode
    {
        public MultilineStringFragment(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "multiline_string_fragment");
            
        }
    }

    public class ObjectCreationExpression : JavaLanguageNode, PrimaryExpression
    {
        public ArgumentList Arguments { get; set; }
        public ISimpleType Type { get; set; }
        public TypeArguments? TypeArguments { get; set; }
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public ObjectCreationExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "object_creation_expression");
            
            this.Arguments = new ArgumentList(node.ChildByFieldName("arguments"));
            this.Type = (ISimpleType) JavaLanguageNode.FromNode(node.ChildByFieldName("type"))!;
            {
                var tmp = node.ChildByFieldName("type_arguments");
                this.TypeArguments = tmp is null ? null : new TypeArguments(tmp);
            }
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class OpensModuleDirective : JavaLanguageNode, ModuleDirective
    {
        public System.Collections.Generic.List<JavaLanguageNode> Modules { get; set; }
        public JavaLanguageNode Package { get; set; }
        public OpensModuleDirective(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "opens_module_directive");
            
            this.Modules = node.ChildrenByFieldName("modules").Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
            this.Package = (JavaLanguageNode) JavaLanguageNode.FromNode(node.ChildByFieldName("package"))!;
        }
    }

    public class PackageDeclaration : JavaLanguageNode, Declaration
    {
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public PackageDeclaration(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "package_declaration");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ParenthesizedExpression : JavaLanguageNode, PrimaryExpression
    {
        public System.Collections.Generic.List<Expression> Children { get; set; }
        public ParenthesizedExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "parenthesized_expression");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (Expression) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class Permits : JavaLanguageNode
    {
        public System.Collections.Generic.List<TypeList> Children { get; set; }
        public Permits(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "permits");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new TypeList(x)).ToList();
        }
    }

    public class Program : JavaLanguageNode
    {
        public System.Collections.Generic.List<Statement> Children { get; set; }
        public Program(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "program");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (Statement) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ProvidesModuleDirective : JavaLanguageNode, ModuleDirective
    {
        public JavaLanguageNode Provided { get; set; }
        public System.Collections.Generic.List<JavaLanguageNode> Provider { get; set; }
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public ProvidesModuleDirective(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "provides_module_directive");
            
            this.Provided = (JavaLanguageNode) JavaLanguageNode.FromNode(node.ChildByFieldName("provided"))!;
            this.Provider = node.ChildrenByFieldName("provider").Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ReceiverParameter : JavaLanguageNode
    {
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public ReceiverParameter(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "receiver_parameter");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class RecordDeclaration : JavaLanguageNode, Declaration
    {
        public ClassBody Body { get; set; }
        public SuperInterfaces? Interfaces { get; set; }
        public Identifier Name { get; set; }
        public FormalParameters Parameters { get; set; }
        public TypeParameters? TypeParameters { get; set; }
        public System.Collections.Generic.List<Modifiers> Children { get; set; }
        public RecordDeclaration(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "record_declaration");
            
            this.Body = new ClassBody(node.ChildByFieldName("body"));
            {
                var tmp = node.ChildByFieldName("interfaces");
                this.Interfaces = tmp is null ? null : new SuperInterfaces(tmp);
            }
            this.Name = new Identifier(node.ChildByFieldName("name"));
            this.Parameters = new FormalParameters(node.ChildByFieldName("parameters"));
            {
                var tmp = node.ChildByFieldName("type_parameters");
                this.TypeParameters = tmp is null ? null : new TypeParameters(tmp);
            }
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Modifiers(x)).ToList();
        }
    }

    public class RequiresModifier : JavaLanguageNode
    {
        public RequiresModifier(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "requires_modifier");
            
        }
    }

    public class RequiresModuleDirective : JavaLanguageNode, ModuleDirective
    {
        public System.Collections.Generic.List<RequiresModifier> Modifiers { get; set; }
        public JavaLanguageNode Module { get; set; }
        public RequiresModuleDirective(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "requires_module_directive");
            
            this.Modifiers = node.ChildrenByFieldName("modifiers").Select(x => new RequiresModifier(x)).ToList();
            this.Module = (JavaLanguageNode) JavaLanguageNode.FromNode(node.ChildByFieldName("module"))!;
        }
    }

    public class Resource : JavaLanguageNode
    {
        public Dimensions? Dimensions { get; set; }
        public Identifier? Name { get; set; }
        public IUnannotatedType? Type { get; set; }
        public Expression? Value { get; set; }
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public Resource(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "resource");
            
            {
                var tmp = node.ChildByFieldName("dimensions");
                this.Dimensions = tmp is null ? null : new Dimensions(tmp);
            }
            {
                var tmp = node.ChildByFieldName("name");
                this.Name = tmp is null ? null : new Identifier(tmp);
            }
            {
                var tmp = node.ChildByFieldName("type");
                this.Type = tmp is null ? null : (IUnannotatedType) JavaLanguageNode.FromNode(tmp);
            }
            {
                var tmp = node.ChildByFieldName("value");
                this.Value = tmp is null ? null : (Expression) JavaLanguageNode.FromNode(tmp);
            }
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ResourceSpecification : JavaLanguageNode
    {
        public System.Collections.Generic.List<Resource> Children { get; set; }
        public ResourceSpecification(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "resource_specification");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Resource(x)).ToList();
        }
    }

    public class ReturnStatement : JavaLanguageNode, Statement
    {
        public System.Collections.Generic.List<Expression> Children { get; set; }
        public ReturnStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "return_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (Expression) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ScopedIdentifier : JavaLanguageNode
    {
        public Identifier Name { get; set; }
        public JavaLanguageNode Scope { get; set; }
        public ScopedIdentifier(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "scoped_identifier");
            
            this.Name = new Identifier(node.ChildByFieldName("name"));
            this.Scope = (JavaLanguageNode) JavaLanguageNode.FromNode(node.ChildByFieldName("scope"))!;
        }
    }

    public class ScopedTypeIdentifier : JavaLanguageNode, ISimpleType
    {
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public ScopedTypeIdentifier(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "scoped_type_identifier");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class SpreadParameter : JavaLanguageNode
    {
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public SpreadParameter(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "spread_parameter");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class StaticInitializer : JavaLanguageNode
    {
        public System.Collections.Generic.List<Block> Children { get; set; }
        public StaticInitializer(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "static_initializer");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Block(x)).ToList();
        }
    }

    public class StringLiteral : JavaLanguageNode, ILiteral
    {
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public StringLiteral(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "string_literal");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class SuperInterfaces : JavaLanguageNode
    {
        public System.Collections.Generic.List<TypeList> Children { get; set; }
        public SuperInterfaces(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "super_interfaces");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new TypeList(x)).ToList();
        }
    }

    public class Superclass : JavaLanguageNode
    {
        public System.Collections.Generic.List<IType> Children { get; set; }
        public Superclass(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "superclass");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (IType) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class SwitchBlock : JavaLanguageNode
    {
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public SwitchBlock(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "switch_block");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class SwitchBlockStatementGroup : JavaLanguageNode
    {
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public SwitchBlockStatementGroup(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "switch_block_statement_group");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class SwitchExpression : JavaLanguageNode, Expression, Statement
    {
        public SwitchBlock Body { get; set; }
        public ParenthesizedExpression Condition { get; set; }
        public SwitchExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "switch_expression");
            
            this.Body = new SwitchBlock(node.ChildByFieldName("body"));
            this.Condition = new ParenthesizedExpression(node.ChildByFieldName("condition"));
        }
    }

    public class SwitchLabel : JavaLanguageNode
    {
        public System.Collections.Generic.List<Expression> Children { get; set; }
        public SwitchLabel(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "switch_label");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (Expression) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class SwitchRule : JavaLanguageNode
    {
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public SwitchRule(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "switch_rule");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class SynchronizedStatement : JavaLanguageNode, Statement
    {
        public Block Body { get; set; }
        public System.Collections.Generic.List<ParenthesizedExpression> Children { get; set; }
        public SynchronizedStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "synchronized_statement");
            
            this.Body = new Block(node.ChildByFieldName("body"));
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new ParenthesizedExpression(x)).ToList();
        }
    }

    public class TernaryExpression : JavaLanguageNode, Expression
    {
        public Expression Alternative { get; set; }
        public Expression Condition { get; set; }
        public Expression Consequence { get; set; }
        public TernaryExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "ternary_expression");
            
            this.Alternative = (Expression) JavaLanguageNode.FromNode(node.ChildByFieldName("alternative"))!;
            this.Condition = (Expression) JavaLanguageNode.FromNode(node.ChildByFieldName("condition"))!;
            this.Consequence = (Expression) JavaLanguageNode.FromNode(node.ChildByFieldName("consequence"))!;
        }
    }

    public class ThrowStatement : JavaLanguageNode, Statement
    {
        public System.Collections.Generic.List<Expression> Children { get; set; }
        public ThrowStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "throw_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (Expression) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class Throws : JavaLanguageNode
    {
        public System.Collections.Generic.List<IType> Children { get; set; }
        public Throws(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "throws");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (IType) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class TryStatement : JavaLanguageNode, Statement
    {
        public Block Body { get; set; }
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public TryStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "try_statement");
            
            this.Body = new Block(node.ChildByFieldName("body"));
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class TryWithResourcesStatement : JavaLanguageNode, Statement
    {
        public Block Body { get; set; }
        public ResourceSpecification Resources { get; set; }
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public TryWithResourcesStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "try_with_resources_statement");
            
            this.Body = new Block(node.ChildByFieldName("body"));
            this.Resources = new ResourceSpecification(node.ChildByFieldName("resources"));
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class TypeArguments : JavaLanguageNode
    {
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public TypeArguments(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "type_arguments");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class TypeBound : JavaLanguageNode
    {
        public System.Collections.Generic.List<IType> Children { get; set; }
        public TypeBound(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "type_bound");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (IType) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class TypeList : JavaLanguageNode
    {
        public System.Collections.Generic.List<IType> Children { get; set; }
        public TypeList(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "type_list");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (IType) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class TypeParameter : JavaLanguageNode
    {
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public TypeParameter(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "type_parameter");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class TypeParameters : JavaLanguageNode
    {
        public System.Collections.Generic.List<TypeParameter> Children { get; set; }
        public TypeParameters(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "type_parameters");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new TypeParameter(x)).ToList();
        }
    }

    public class UnaryExpression : JavaLanguageNode, Expression
    {
        public Expression Operand { get; set; }
        public JavaLanguageNodeTerminalNode Operator { get; set; }
        public UnaryExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "unary_expression");
            
            this.Operand = (Expression) JavaLanguageNode.FromNode(node.ChildByFieldName("operand"))!;
            this.Operator = new JavaLanguageNodeTerminalNode(node.ChildByFieldName("operator"));
        }
    }

    public class UpdateExpression : JavaLanguageNode, Expression
    {
        public System.Collections.Generic.List<Expression> Children { get; set; }
        public UpdateExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "update_expression");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (Expression) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class UsesModuleDirective : JavaLanguageNode, ModuleDirective
    {
        public JavaLanguageNode Type { get; set; }
        public UsesModuleDirective(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "uses_module_directive");
            
            this.Type = (JavaLanguageNode) JavaLanguageNode.FromNode(node.ChildByFieldName("type"))!;
        }
    }

    public class VariableDeclarator : JavaLanguageNode
    {
        public Dimensions? Dimensions { get; set; }
        public Identifier Name { get; set; }
        public JavaLanguageNode? Value { get; set; }
        public VariableDeclarator(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "variable_declarator");
            
            {
                var tmp = node.ChildByFieldName("dimensions");
                this.Dimensions = tmp is null ? null : new Dimensions(tmp);
            }
            this.Name = new Identifier(node.ChildByFieldName("name"));
            {
                var tmp = node.ChildByFieldName("value");
                this.Value = tmp is null ? null : (JavaLanguageNode) JavaLanguageNode.FromNode(tmp);
            }
        }
    }

    public class WhileStatement : JavaLanguageNode, Statement
    {
        public Statement Body { get; set; }
        public Condition Condition { get; set; }
        public WhileStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "while_statement");
            
            this.Body = (Statement) JavaLanguageNode.FromNode(node.ChildByFieldName("body"))!;
            this.Condition = new Condition(node.ChildByFieldName("condition"));
        }
    }

    public class Wildcard : JavaLanguageNode
    {
        public System.Collections.Generic.List<JavaLanguageNode> Children { get; set; }
        public Wildcard(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "wildcard");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaLanguageNode) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class YieldStatement : JavaLanguageNode, Statement
    {
        public System.Collections.Generic.List<Expression> Children { get; set; }
        public YieldStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "yield_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (Expression) JavaLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class BinaryIntegerLiteral : JavaLanguageNode, ILiteral
    {
        public BinaryIntegerLiteral(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "binary_integer_literal");
            
        }
    }

    public class BlockComment : JavaLanguageNode, Comment
    {
        public BlockComment(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "block_comment");
            
        }
    }

    public class BooleanType : JavaLanguageNode, ISimpleType
    {
        public BooleanType(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "boolean_type");
            
        }
    }

    public class CharacterLiteral : JavaLanguageNode, ILiteral
    {
        public CharacterLiteral(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "character_literal");
            
        }
    }

    public class DecimalFloatingPointLiteral : JavaLanguageNode, ILiteral
    {
        public DecimalFloatingPointLiteral(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "decimal_floating_point_literal");
            
        }
    }

    public class DecimalIntegerLiteral : JavaLanguageNode, ILiteral
    {
        public DecimalIntegerLiteral(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "decimal_integer_literal");
            
        }
    }

    public class EscapeSequence : JavaLanguageNode
    {
        public EscapeSequence(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "escape_sequence");
            
        }
    }

    public class False : JavaLanguageNode, ILiteral
    {
        public False(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "false");
            
        }
    }

    public class HexFloatingPointLiteral : JavaLanguageNode, ILiteral
    {
        public HexFloatingPointLiteral(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "hex_floating_point_literal");
            
        }
    }

    public class HexIntegerLiteral : JavaLanguageNode, ILiteral
    {
        public HexIntegerLiteral(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "hex_integer_literal");
            
        }
    }

    public class Identifier : JavaLanguageNode, PrimaryExpression
    {
        public Identifier(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "identifier");
            
        }
    }

    public class LineComment : JavaLanguageNode, Comment
    {
        public LineComment(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "line_comment");
            
        }
    }

    public class NullLiteral : JavaLanguageNode, ILiteral
    {
        public NullLiteral(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "null_literal");
            
        }
    }

    public class OctalIntegerLiteral : JavaLanguageNode, ILiteral
    {
        public OctalIntegerLiteral(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "octal_integer_literal");
            
        }
    }

    public class StringFragment : JavaLanguageNode
    {
        public StringFragment(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "string_fragment");
            
        }
    }

    public class Super : JavaLanguageNode
    {
        public Super(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "super");
            
        }
    }

    public class This : JavaLanguageNode, PrimaryExpression
    {
        public This(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "this");
            
        }
    }

    public class True : JavaLanguageNode, ILiteral
    {
        public True(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "true");
            
        }
    }

    public class TypeIdentifier : JavaLanguageNode, ISimpleType
    {
        public TypeIdentifier(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "type_identifier");
            
        }
    }

    public class VoidType : JavaLanguageNode, ISimpleType
    {
        public VoidType(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "void_type");
            
        }
    }
}