//----------------------
// <auto-generated>
//     Generated by node_generator.py
//     source: langs-native/tree-sitter-python/src/node-types.json
// </auto-generated>
//----------------------

#nullable enable

using System.Linq;

namespace TreeSitter.Python.Nodes {

    public abstract class PythonLanguageNode
    {
        public static PythonLanguageNode FromNode(TreeSitter.Node node) {
            if (node is null) throw new System.ArgumentNullException(nameof(node));
            if (!node.IsNamed) return new PythonLanguageNodeTerminalNode(node);
            switch (node.Kind) {
                case "with_statement": return new WithStatement(node);
                case "pair": return new Pair(node);
                case "finally_clause": return new FinallyClause(node);
                case "aliased_import": return new AliasedImport(node);
                case "set": return new Set(node);
                case "augmented_assignment": return new AugmentedAssignment(node);
                case "boolean_operator": return new BooleanOperator(node);
                case "dotted_name": return new DottedName(node);
                case "set_comprehension": return new SetComprehension(node);
                case "yield": return new Yield(node);
                case "break_statement": return new BreakStatement(node);
                case "await": return new Await(node);
                case "binary_operator": return new BinaryOperator(node);
                case "wildcard_import": return new WildcardImport(node);
                case "keyword_separator": return new KeywordSeparator(node);
                case "pass_statement": return new PassStatement(node);
                case "default_parameter": return new DefaultParameter(node);
                case "keyword_argument": return new KeywordArgument(node);
                case "dictionary_splat": return new DictionarySplat(node);
                case "parameters": return new Parameters(node);
                case "import_prefix": return new ImportPrefix(node);
                case "import_statement": return new ImportStatement(node);
                case "with_clause": return new WithClause(node);
                case "exec_statement": return new ExecStatement(node);
                case "escape_sequence": return new EscapeSequence(node);
                case "list_comprehension": return new ListComprehension(node);
                case "none": return new None(node);
                case "case_clause": return new CaseClause(node);
                case "typed_parameter": return new TypedParameter(node);
                case "slice": return new Slice(node);
                case "as_pattern_target": return new AsPatternTarget(node);
                case "integer": return new Integer(node);
                case "function_definition": return new FunctionDefinition(node);
                case "raise_statement": return new RaiseStatement(node);
                case "nonlocal_statement": return new NonlocalStatement(node);
                case "module": return new Module(node);
                case "try_statement": return new TryStatement(node);
                case "print_statement": return new PrintStatement(node);
                case "delete_statement": return new DeleteStatement(node);
                case "list_splat_pattern": return new ListSplatPattern(node);
                case "assert_statement": return new AssertStatement(node);
                case "future_import_statement": return new FutureImportStatement(node);
                case "format_expression": return new FormatExpression(node);
                case "comparison_operator": return new ComparisonOperator(node);
                case "relative_import": return new RelativeImport(node);
                case "attribute": return new Attribute(node);
                case "dictionary_comprehension": return new DictionaryComprehension(node);
                case "for_statement": return new ForStatement(node);
                case "import_from_statement": return new ImportFromStatement(node);
                case "return_statement": return new ReturnStatement(node);
                case "unary_operator": return new UnaryOperator(node);
                case "list": return new List(node);
                case "except_group_clause": return new ExceptGroupClause(node);
                case "format_specifier": return new FormatSpecifier(node);
                case "false": return new False(node);
                case "except_clause": return new ExceptClause(node);
                case "match_statement": return new MatchStatement(node);
                case "string_end": return new StringEnd(node);
                case "comment": return new Comment(node);
                case "case_pattern": return new CasePattern(node);
                case "not_operator": return new NotOperator(node);
                case "named_expression": return new NamedExpression(node);
                case "conditional_expression": return new ConditionalExpression(node);
                case "pattern_list": return new PatternList(node);
                case "concatenated_string": return new ConcatenatedString(node);
                case "if_clause": return new IfClause(node);
                case "call": return new Call(node);
                case "float": return new Float(node);
                case "list_splat": return new ListSplat(node);
                case "tuple_pattern": return new TuplePattern(node);
                case "while_statement": return new WhileStatement(node);
                case "global_statement": return new GlobalStatement(node);
                case "typed_default_parameter": return new TypedDefaultParameter(node);
                case "decorator": return new Decorator(node);
                case "class_definition": return new ClassDefinition(node);
                case "dictionary": return new Dictionary(node);
                case "block": return new Block(node);
                case "positional_separator": return new PositionalSeparator(node);
                case "true": return new True(node);
                case "parenthesized_expression": return new ParenthesizedExpression(node);
                case "else_clause": return new ElseClause(node);
                case "tuple": return new Tuple(node);
                case "expression_list": return new ExpressionList(node);
                case "continue_statement": return new ContinueStatement(node);
                case "for_in_clause": return new ForInClause(node);
                case "string_start": return new StringStart(node);
                case "decorated_definition": return new DecoratedDefinition(node);
                case "dictionary_splat_pattern": return new DictionarySplatPattern(node);
                case "assignment": return new Assignment(node);
                case "parenthesized_list_splat": return new ParenthesizedListSplat(node);
                case "string": return new String(node);
                case "identifier": return new Identifier(node);
                case "line_continuation": return new LineContinuation(node);
                case "subscript": return new Subscript(node);
                case "elif_clause": return new ElifClause(node);
                case "chevron": return new Chevron(node);
                case "interpolation": return new Interpolation(node);
                case "argument_list": return new ArgumentList(node);
                case "type_conversion": return new TypeConversion(node);
                case "type": return new Type(node);
                case "lambda": return new Lambda(node);
                case "lambda_parameters": return new LambdaParameters(node);
                case "generator_expression": return new GeneratorExpression(node);
                case "list_pattern": return new ListPattern(node);
                case "ellipsis": return new Ellipsis(node);
                case "string_content": return new StringContent(node);
                case "expression_statement": return new ExpressionStatement(node);
                case "if_statement": return new IfStatement(node);
                case "as_pattern": return new AsPattern(node);
                case "with_item": return new WithItem(node);
                case "ERROR": return new ErrorNode(node);
                default: throw new System.ArgumentException("unknown node type: " + node.Kind, nameof(node));
            }
        }

    
        public string Kind { get; set; }

        protected PythonLanguageNode(TreeSitter.Node node)
        {
            Kind = node.Kind;
        }
    }
    
    public class PythonLanguageNodeTerminalNode : PythonLanguageNode
    {
        public PythonLanguageNodeTerminalNode(TreeSitter.Node node) : base(node)
        {
        }
    }
    
    public class ErrorNode : PythonLanguageNode
    {
        public ErrorNode(TreeSitter.Node node) : base(node)
        {
        }
    }

    public interface ICompoundStatement
    {
    }

    public interface ISimpleStatement
    {
    }

    public interface Expression
    {
    }

    public interface Parameter
    {
    }

    public interface Pattern
    {
    }

    public interface PrimaryExpression : Expression
    {
    }

    public class AliasedImport : PythonLanguageNode
    {
        public Identifier Alias { get; set; }
        public DottedName Name { get; set; }
        public AliasedImport(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "aliased_import");
            
            this.Alias = new Identifier(node.ChildByFieldName("alias"));
            this.Name = new DottedName(node.ChildByFieldName("name"));
        }
    }

    public class ArgumentList : PythonLanguageNode
    {
        public System.Collections.Generic.List<PythonLanguageNode> Children { get; set; }
        public ArgumentList(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "argument_list");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (PythonLanguageNode) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class AsPattern : PythonLanguageNode, Expression
    {
        public AsPatternTarget Alias { get; set; }
        public System.Collections.Generic.List<Expression> Children { get; set; }
        public AsPattern(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "as_pattern");
            
            this.Alias = new AsPatternTarget(node.ChildByFieldName("alias"));
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (Expression) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class AssertStatement : PythonLanguageNode, ISimpleStatement
    {
        public System.Collections.Generic.List<Expression> Children { get; set; }
        public AssertStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "assert_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (Expression) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class Assignment : PythonLanguageNode
    {
        public PythonLanguageNode Left { get; set; }
        public PythonLanguageNode? Right { get; set; }
        public Type? Type { get; set; }
        public Assignment(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "assignment");
            
            this.Left = (PythonLanguageNode) PythonLanguageNode.FromNode(node.ChildByFieldName("left"))!;
            {
                var tmp = node.ChildByFieldName("right");
                this.Right = tmp is null ? null : (PythonLanguageNode) PythonLanguageNode.FromNode(tmp);
            }
            {
                var tmp = node.ChildByFieldName("type");
                this.Type = tmp is null ? null : new Type(tmp);
            }
        }
    }

    public class Attribute : PythonLanguageNode, Pattern, PrimaryExpression
    {
        public Identifier TheAttribute { get; set; }
        public PrimaryExpression Object { get; set; }
        public Attribute(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "attribute");
            
            this.TheAttribute = new Identifier(node.ChildByFieldName("attribute"));
            this.Object = (PrimaryExpression) PythonLanguageNode.FromNode(node.ChildByFieldName("object"))!;
        }
    }

    public class AugmentedAssignment : PythonLanguageNode
    {
        public PythonLanguageNode Left { get; set; }
        public PythonLanguageNodeTerminalNode Operator { get; set; }
        public PythonLanguageNode Right { get; set; }
        public AugmentedAssignment(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "augmented_assignment");
            
            this.Left = (PythonLanguageNode) PythonLanguageNode.FromNode(node.ChildByFieldName("left"))!;
            this.Operator = new PythonLanguageNodeTerminalNode(node.ChildByFieldName("operator"));
            this.Right = (PythonLanguageNode) PythonLanguageNode.FromNode(node.ChildByFieldName("right"))!;
        }
    }

    public class Await : PythonLanguageNode, PrimaryExpression
    {
        public System.Collections.Generic.List<PrimaryExpression> Children { get; set; }
        public Await(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "await");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (PrimaryExpression) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class BinaryOperator : PythonLanguageNode, PrimaryExpression
    {
        public PrimaryExpression Left { get; set; }
        public PythonLanguageNodeTerminalNode Operator { get; set; }
        public PrimaryExpression Right { get; set; }
        public BinaryOperator(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "binary_operator");
            
            this.Left = (PrimaryExpression) PythonLanguageNode.FromNode(node.ChildByFieldName("left"))!;
            this.Operator = new PythonLanguageNodeTerminalNode(node.ChildByFieldName("operator"));
            this.Right = (PrimaryExpression) PythonLanguageNode.FromNode(node.ChildByFieldName("right"))!;
        }
    }

    public class Block : PythonLanguageNode
    {
        public System.Collections.Generic.List<CaseClause> Alternative { get; set; }
        public System.Collections.Generic.List<PythonLanguageNode> Children { get; set; }
        public Block(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "block");
            
            this.Alternative = node.ChildrenByFieldName("alternative").Select(x => new CaseClause(x)).ToList();
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (PythonLanguageNode) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class BooleanOperator : PythonLanguageNode, Expression
    {
        public Expression Left { get; set; }
        public PythonLanguageNodeTerminalNode Operator { get; set; }
        public Expression Right { get; set; }
        public BooleanOperator(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "boolean_operator");
            
            this.Left = (Expression) PythonLanguageNode.FromNode(node.ChildByFieldName("left"))!;
            this.Operator = new PythonLanguageNodeTerminalNode(node.ChildByFieldName("operator"));
            this.Right = (Expression) PythonLanguageNode.FromNode(node.ChildByFieldName("right"))!;
        }
    }

    public class BreakStatement : PythonLanguageNode, ISimpleStatement
    {
        public BreakStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "break_statement");
            
        }
    }

    public class Call : PythonLanguageNode, PrimaryExpression
    {
        public PythonLanguageNode Arguments { get; set; }
        public PrimaryExpression Function { get; set; }
        public Call(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "call");
            
            this.Arguments = (PythonLanguageNode) PythonLanguageNode.FromNode(node.ChildByFieldName("arguments"))!;
            this.Function = (PrimaryExpression) PythonLanguageNode.FromNode(node.ChildByFieldName("function"))!;
        }
    }

    public class CaseClause : PythonLanguageNode
    {
        public Block Consequence { get; set; }
        public IfClause? Guard { get; set; }
        public System.Collections.Generic.List<CasePattern> Pattern { get; set; }
        public CaseClause(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "case_clause");
            
            this.Consequence = new Block(node.ChildByFieldName("consequence"));
            {
                var tmp = node.ChildByFieldName("guard");
                this.Guard = tmp is null ? null : new IfClause(tmp);
            }
            this.Pattern = node.ChildrenByFieldName("pattern").Select(x => new CasePattern(x)).ToList();
        }
    }

    public class Chevron : PythonLanguageNode
    {
        public System.Collections.Generic.List<Expression> Children { get; set; }
        public Chevron(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "chevron");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (Expression) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ClassDefinition : PythonLanguageNode, ICompoundStatement
    {
        public Block Body { get; set; }
        public Identifier Name { get; set; }
        public ArgumentList? Superclasses { get; set; }
        public ClassDefinition(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "class_definition");
            
            this.Body = new Block(node.ChildByFieldName("body"));
            this.Name = new Identifier(node.ChildByFieldName("name"));
            {
                var tmp = node.ChildByFieldName("superclasses");
                this.Superclasses = tmp is null ? null : new ArgumentList(tmp);
            }
        }
    }

    public class ComparisonOperator : PythonLanguageNode, Expression
    {
        public System.Collections.Generic.List<PythonLanguageNodeTerminalNode> Operators { get; set; }
        public System.Collections.Generic.List<PrimaryExpression> Children { get; set; }
        public ComparisonOperator(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "comparison_operator");
            
            this.Operators = node.ChildrenByFieldName("operators").Select(x => new PythonLanguageNodeTerminalNode(x)).ToList();
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (PrimaryExpression) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ConcatenatedString : PythonLanguageNode, PrimaryExpression
    {
        public System.Collections.Generic.List<String> Children { get; set; }
        public ConcatenatedString(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "concatenated_string");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new String(x)).ToList();
        }
    }

    public class ConditionalExpression : PythonLanguageNode, Expression
    {
        public System.Collections.Generic.List<Expression> Children { get; set; }
        public ConditionalExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "conditional_expression");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (Expression) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ContinueStatement : PythonLanguageNode, ISimpleStatement
    {
        public ContinueStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "continue_statement");
            
        }
    }

    public class DecoratedDefinition : PythonLanguageNode, ICompoundStatement
    {
        public PythonLanguageNode Definition { get; set; }
        public System.Collections.Generic.List<Decorator> Children { get; set; }
        public DecoratedDefinition(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "decorated_definition");
            
            this.Definition = (PythonLanguageNode) PythonLanguageNode.FromNode(node.ChildByFieldName("definition"))!;
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Decorator(x)).ToList();
        }
    }

    public class Decorator : PythonLanguageNode
    {
        public System.Collections.Generic.List<Expression> Children { get; set; }
        public Decorator(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "decorator");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (Expression) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class DefaultParameter : PythonLanguageNode, Parameter
    {
        public PythonLanguageNode Name { get; set; }
        public Expression Value { get; set; }
        public DefaultParameter(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "default_parameter");
            
            this.Name = (PythonLanguageNode) PythonLanguageNode.FromNode(node.ChildByFieldName("name"))!;
            this.Value = (Expression) PythonLanguageNode.FromNode(node.ChildByFieldName("value"))!;
        }
    }

    public class DeleteStatement : PythonLanguageNode, ISimpleStatement
    {
        public System.Collections.Generic.List<PythonLanguageNode> Children { get; set; }
        public DeleteStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "delete_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (PythonLanguageNode) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class Dictionary : PythonLanguageNode, PrimaryExpression
    {
        public System.Collections.Generic.List<PythonLanguageNode> Children { get; set; }
        public Dictionary(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "dictionary");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (PythonLanguageNode) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class DictionaryComprehension : PythonLanguageNode, PrimaryExpression
    {
        public Pair Body { get; set; }
        public System.Collections.Generic.List<PythonLanguageNode> Children { get; set; }
        public DictionaryComprehension(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "dictionary_comprehension");
            
            this.Body = new Pair(node.ChildByFieldName("body"));
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (PythonLanguageNode) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class DictionarySplat : PythonLanguageNode
    {
        public System.Collections.Generic.List<Expression> Children { get; set; }
        public DictionarySplat(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "dictionary_splat");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (Expression) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class DictionarySplatPattern : PythonLanguageNode, Parameter
    {
        public System.Collections.Generic.List<PythonLanguageNode> Children { get; set; }
        public DictionarySplatPattern(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "dictionary_splat_pattern");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (PythonLanguageNode) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class DottedName : PythonLanguageNode
    {
        public System.Collections.Generic.List<Identifier> Children { get; set; }
        public DottedName(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "dotted_name");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Identifier(x)).ToList();
        }
    }

    public class ElifClause : PythonLanguageNode
    {
        public Expression Condition { get; set; }
        public Block Consequence { get; set; }
        public ElifClause(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "elif_clause");
            
            this.Condition = (Expression) PythonLanguageNode.FromNode(node.ChildByFieldName("condition"))!;
            this.Consequence = new Block(node.ChildByFieldName("consequence"));
        }
    }

    public class ElseClause : PythonLanguageNode
    {
        public Block Body { get; set; }
        public ElseClause(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "else_clause");
            
            this.Body = new Block(node.ChildByFieldName("body"));
        }
    }

    public class ExceptClause : PythonLanguageNode
    {
        public System.Collections.Generic.List<PythonLanguageNode> Children { get; set; }
        public ExceptClause(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "except_clause");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (PythonLanguageNode) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ExceptGroupClause : PythonLanguageNode
    {
        public System.Collections.Generic.List<PythonLanguageNode> Children { get; set; }
        public ExceptGroupClause(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "except_group_clause");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (PythonLanguageNode) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ExecStatement : PythonLanguageNode, ISimpleStatement
    {
        public PythonLanguageNode Code { get; set; }
        public System.Collections.Generic.List<Expression> Children { get; set; }
        public ExecStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "exec_statement");
            
            this.Code = (PythonLanguageNode) PythonLanguageNode.FromNode(node.ChildByFieldName("code"))!;
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (Expression) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ExpressionList : PythonLanguageNode
    {
        public System.Collections.Generic.List<Expression> Children { get; set; }
        public ExpressionList(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "expression_list");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (Expression) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ExpressionStatement : PythonLanguageNode, ISimpleStatement
    {
        public System.Collections.Generic.List<PythonLanguageNode> Children { get; set; }
        public ExpressionStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "expression_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (PythonLanguageNode) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class FinallyClause : PythonLanguageNode
    {
        public System.Collections.Generic.List<Block> Children { get; set; }
        public FinallyClause(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "finally_clause");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Block(x)).ToList();
        }
    }

    public class ForInClause : PythonLanguageNode
    {
        public PythonLanguageNode Left { get; set; }
        public System.Collections.Generic.List<PythonLanguageNode> Right { get; set; }
        public ForInClause(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "for_in_clause");
            
            this.Left = (PythonLanguageNode) PythonLanguageNode.FromNode(node.ChildByFieldName("left"))!;
            this.Right = node.ChildrenByFieldName("right").Select(x => (PythonLanguageNode) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ForStatement : PythonLanguageNode, ICompoundStatement
    {
        public ElseClause? Alternative { get; set; }
        public Block Body { get; set; }
        public PythonLanguageNode Left { get; set; }
        public PythonLanguageNode Right { get; set; }
        public ForStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "for_statement");
            
            {
                var tmp = node.ChildByFieldName("alternative");
                this.Alternative = tmp is null ? null : new ElseClause(tmp);
            }
            this.Body = new Block(node.ChildByFieldName("body"));
            this.Left = (PythonLanguageNode) PythonLanguageNode.FromNode(node.ChildByFieldName("left"))!;
            this.Right = (PythonLanguageNode) PythonLanguageNode.FromNode(node.ChildByFieldName("right"))!;
        }
    }

    public class FormatExpression : PythonLanguageNode
    {
        public PythonLanguageNode Expression { get; set; }
        public FormatSpecifier? FormatSpecifier { get; set; }
        public TypeConversion? TypeConversion { get; set; }
        public FormatExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "format_expression");
            
            this.Expression = (PythonLanguageNode) PythonLanguageNode.FromNode(node.ChildByFieldName("expression"))!;
            {
                var tmp = node.ChildByFieldName("format_specifier");
                this.FormatSpecifier = tmp is null ? null : new FormatSpecifier(tmp);
            }
            {
                var tmp = node.ChildByFieldName("type_conversion");
                this.TypeConversion = tmp is null ? null : new TypeConversion(tmp);
            }
        }
    }

    public class FormatSpecifier : PythonLanguageNode
    {
        public System.Collections.Generic.List<FormatExpression> Children { get; set; }
        public FormatSpecifier(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "format_specifier");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new FormatExpression(x)).ToList();
        }
    }

    public class FunctionDefinition : PythonLanguageNode, ICompoundStatement
    {
        public Block Body { get; set; }
        public Identifier Name { get; set; }
        public Parameters Parameters { get; set; }
        public Type? ReturnType { get; set; }
        public FunctionDefinition(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "function_definition");
            
            this.Body = new Block(node.ChildByFieldName("body"));
            this.Name = new Identifier(node.ChildByFieldName("name"));
            this.Parameters = new Parameters(node.ChildByFieldName("parameters"));
            {
                var tmp = node.ChildByFieldName("return_type");
                this.ReturnType = tmp is null ? null : new Type(tmp);
            }
        }
    }

    public class FutureImportStatement : PythonLanguageNode, ISimpleStatement
    {
        public System.Collections.Generic.List<PythonLanguageNode> Name { get; set; }
        public FutureImportStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "future_import_statement");
            
            this.Name = node.ChildrenByFieldName("name").Select(x => (PythonLanguageNode) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class GeneratorExpression : PythonLanguageNode, PrimaryExpression
    {
        public Expression Body { get; set; }
        public System.Collections.Generic.List<PythonLanguageNode> Children { get; set; }
        public GeneratorExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "generator_expression");
            
            this.Body = (Expression) PythonLanguageNode.FromNode(node.ChildByFieldName("body"))!;
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (PythonLanguageNode) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class GlobalStatement : PythonLanguageNode, ISimpleStatement
    {
        public System.Collections.Generic.List<Identifier> Children { get; set; }
        public GlobalStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "global_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Identifier(x)).ToList();
        }
    }

    public class IfClause : PythonLanguageNode
    {
        public System.Collections.Generic.List<Expression> Children { get; set; }
        public IfClause(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "if_clause");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (Expression) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class IfStatement : PythonLanguageNode, ICompoundStatement
    {
        public System.Collections.Generic.List<PythonLanguageNode> Alternative { get; set; }
        public Expression Condition { get; set; }
        public Block Consequence { get; set; }
        public IfStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "if_statement");
            
            this.Alternative = node.ChildrenByFieldName("alternative").Select(x => (PythonLanguageNode) PythonLanguageNode.FromNode(x)!).ToList();
            this.Condition = (Expression) PythonLanguageNode.FromNode(node.ChildByFieldName("condition"))!;
            this.Consequence = new Block(node.ChildByFieldName("consequence"));
        }
    }

    public class ImportFromStatement : PythonLanguageNode, ISimpleStatement
    {
        public PythonLanguageNode ModuleName { get; set; }
        public System.Collections.Generic.List<PythonLanguageNode> Name { get; set; }
        public System.Collections.Generic.List<WildcardImport> Children { get; set; }
        public ImportFromStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "import_from_statement");
            
            this.ModuleName = (PythonLanguageNode) PythonLanguageNode.FromNode(node.ChildByFieldName("module_name"))!;
            this.Name = node.ChildrenByFieldName("name").Select(x => (PythonLanguageNode) PythonLanguageNode.FromNode(x)!).ToList();
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new WildcardImport(x)).ToList();
        }
    }

    public class ImportPrefix : PythonLanguageNode
    {
        public ImportPrefix(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "import_prefix");
            
        }
    }

    public class ImportStatement : PythonLanguageNode, ISimpleStatement
    {
        public System.Collections.Generic.List<PythonLanguageNode> Name { get; set; }
        public ImportStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "import_statement");
            
            this.Name = node.ChildrenByFieldName("name").Select(x => (PythonLanguageNode) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class Interpolation : PythonLanguageNode
    {
        public PythonLanguageNode Expression { get; set; }
        public FormatSpecifier? FormatSpecifier { get; set; }
        public TypeConversion? TypeConversion { get; set; }
        public Interpolation(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "interpolation");
            
            this.Expression = (PythonLanguageNode) PythonLanguageNode.FromNode(node.ChildByFieldName("expression"))!;
            {
                var tmp = node.ChildByFieldName("format_specifier");
                this.FormatSpecifier = tmp is null ? null : new FormatSpecifier(tmp);
            }
            {
                var tmp = node.ChildByFieldName("type_conversion");
                this.TypeConversion = tmp is null ? null : new TypeConversion(tmp);
            }
        }
    }

    public class KeywordArgument : PythonLanguageNode
    {
        public Identifier Name { get; set; }
        public Expression Value { get; set; }
        public KeywordArgument(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "keyword_argument");
            
            this.Name = new Identifier(node.ChildByFieldName("name"));
            this.Value = (Expression) PythonLanguageNode.FromNode(node.ChildByFieldName("value"))!;
        }
    }

    public class KeywordSeparator : PythonLanguageNode, Parameter
    {
        public KeywordSeparator(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "keyword_separator");
            
        }
    }

    public class Lambda : PythonLanguageNode, Expression
    {
        public Expression Body { get; set; }
        public LambdaParameters? Parameters { get; set; }
        public Lambda(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "lambda");
            
            this.Body = (Expression) PythonLanguageNode.FromNode(node.ChildByFieldName("body"))!;
            {
                var tmp = node.ChildByFieldName("parameters");
                this.Parameters = tmp is null ? null : new LambdaParameters(tmp);
            }
        }
    }

    public class LambdaParameters : PythonLanguageNode
    {
        public System.Collections.Generic.List<Parameter> Children { get; set; }
        public LambdaParameters(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "lambda_parameters");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (Parameter) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class List : PythonLanguageNode, PrimaryExpression
    {
        public System.Collections.Generic.List<PythonLanguageNode> Children { get; set; }
        public List(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "list");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (PythonLanguageNode) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ListComprehension : PythonLanguageNode, PrimaryExpression
    {
        public Expression Body { get; set; }
        public System.Collections.Generic.List<PythonLanguageNode> Children { get; set; }
        public ListComprehension(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "list_comprehension");
            
            this.Body = (Expression) PythonLanguageNode.FromNode(node.ChildByFieldName("body"))!;
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (PythonLanguageNode) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ListPattern : PythonLanguageNode, Pattern
    {
        public System.Collections.Generic.List<Pattern> Children { get; set; }
        public ListPattern(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "list_pattern");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (Pattern) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ListSplat : PythonLanguageNode, PrimaryExpression
    {
        public System.Collections.Generic.List<PythonLanguageNode> Children { get; set; }
        public ListSplat(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "list_splat");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (PythonLanguageNode) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class CasePattern : PythonLanguageNode, Pattern
    {
        public System.Collections.Generic.List<PythonLanguageNode> Children { get; set; }
        public CasePattern(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "case_pattern");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (PythonLanguageNode) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ListSplatPattern : PythonLanguageNode, Parameter, Pattern
    {
        public System.Collections.Generic.List<PythonLanguageNode> Children { get; set; }
        public ListSplatPattern(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "list_splat_pattern");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (PythonLanguageNode) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class MatchStatement : PythonLanguageNode, ICompoundStatement
    {
        public Block Body { get; set; }
        public System.Collections.Generic.List<Expression> Subject { get; set; }
        public MatchStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "match_statement");
            
            this.Body = new Block(node.ChildByFieldName("body"));
            this.Subject = node.ChildrenByFieldName("subject").Select(x => (Expression) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class Module : PythonLanguageNode
    {
        public System.Collections.Generic.List<PythonLanguageNode> Children { get; set; }
        public Module(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "module");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (PythonLanguageNode) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class NamedExpression : PythonLanguageNode, Expression
    {
        public Identifier Name { get; set; }
        public Expression Value { get; set; }
        public NamedExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "named_expression");
            
            this.Name = new Identifier(node.ChildByFieldName("name"));
            this.Value = (Expression) PythonLanguageNode.FromNode(node.ChildByFieldName("value"))!;
        }
    }

    public class NonlocalStatement : PythonLanguageNode, ISimpleStatement
    {
        public System.Collections.Generic.List<Identifier> Children { get; set; }
        public NonlocalStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "nonlocal_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Identifier(x)).ToList();
        }
    }

    public class NotOperator : PythonLanguageNode, Expression
    {
        public Expression Argument { get; set; }
        public NotOperator(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "not_operator");
            
            this.Argument = (Expression) PythonLanguageNode.FromNode(node.ChildByFieldName("argument"))!;
        }
    }

    public class Pair : PythonLanguageNode
    {
        public Expression Key { get; set; }
        public Expression Value { get; set; }
        public Pair(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "pair");
            
            this.Key = (Expression) PythonLanguageNode.FromNode(node.ChildByFieldName("key"))!;
            this.Value = (Expression) PythonLanguageNode.FromNode(node.ChildByFieldName("value"))!;
        }
    }

    public class Parameters : PythonLanguageNode
    {
        public System.Collections.Generic.List<Parameter> Children { get; set; }
        public Parameters(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "parameters");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (Parameter) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ParenthesizedExpression : PythonLanguageNode, PrimaryExpression
    {
        public System.Collections.Generic.List<PythonLanguageNode> Children { get; set; }
        public ParenthesizedExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "parenthesized_expression");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (PythonLanguageNode) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ParenthesizedListSplat : PythonLanguageNode
    {
        public System.Collections.Generic.List<PythonLanguageNode> Children { get; set; }
        public ParenthesizedListSplat(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "parenthesized_list_splat");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (PythonLanguageNode) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class PassStatement : PythonLanguageNode, ISimpleStatement
    {
        public PassStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "pass_statement");
            
        }
    }

    public class PatternList : PythonLanguageNode
    {
        public System.Collections.Generic.List<Pattern> Children { get; set; }
        public PatternList(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "pattern_list");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (Pattern) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class PositionalSeparator : PythonLanguageNode, Parameter
    {
        public PositionalSeparator(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "positional_separator");
            
        }
    }

    public class PrintStatement : PythonLanguageNode, ISimpleStatement
    {
        public System.Collections.Generic.List<Expression> Argument { get; set; }
        public System.Collections.Generic.List<Chevron> Children { get; set; }
        public PrintStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "print_statement");
            
            this.Argument = node.ChildrenByFieldName("argument").Select(x => (Expression) PythonLanguageNode.FromNode(x)!).ToList();
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Chevron(x)).ToList();
        }
    }

    public class RaiseStatement : PythonLanguageNode, ISimpleStatement
    {
        public Expression? Cause { get; set; }
        public System.Collections.Generic.List<PythonLanguageNode> Children { get; set; }
        public RaiseStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "raise_statement");
            
            {
                var tmp = node.ChildByFieldName("cause");
                this.Cause = tmp is null ? null : (Expression) PythonLanguageNode.FromNode(tmp);
            }
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (PythonLanguageNode) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class RelativeImport : PythonLanguageNode
    {
        public System.Collections.Generic.List<PythonLanguageNode> Children { get; set; }
        public RelativeImport(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "relative_import");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (PythonLanguageNode) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ReturnStatement : PythonLanguageNode, ISimpleStatement
    {
        public System.Collections.Generic.List<PythonLanguageNode> Children { get; set; }
        public ReturnStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "return_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (PythonLanguageNode) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class Set : PythonLanguageNode, PrimaryExpression
    {
        public System.Collections.Generic.List<PythonLanguageNode> Children { get; set; }
        public Set(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "set");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (PythonLanguageNode) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class SetComprehension : PythonLanguageNode, PrimaryExpression
    {
        public Expression Body { get; set; }
        public System.Collections.Generic.List<PythonLanguageNode> Children { get; set; }
        public SetComprehension(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "set_comprehension");
            
            this.Body = (Expression) PythonLanguageNode.FromNode(node.ChildByFieldName("body"))!;
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (PythonLanguageNode) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class Slice : PythonLanguageNode
    {
        public System.Collections.Generic.List<Expression> Children { get; set; }
        public Slice(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "slice");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (Expression) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class String : PythonLanguageNode, PrimaryExpression
    {
        public System.Collections.Generic.List<PythonLanguageNode> Children { get; set; }
        public String(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "string");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (PythonLanguageNode) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class StringContent : PythonLanguageNode
    {
        public System.Collections.Generic.List<EscapeSequence> Children { get; set; }
        public StringContent(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "string_content");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new EscapeSequence(x)).ToList();
        }
    }

    public class Subscript : PythonLanguageNode, Pattern, PrimaryExpression
    {
        public System.Collections.Generic.List<PythonLanguageNode> TheSubscript { get; set; }
        public PrimaryExpression Value { get; set; }
        public Subscript(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "subscript");
            
            this.TheSubscript = node.ChildrenByFieldName("subscript").Select(x => (PythonLanguageNode) PythonLanguageNode.FromNode(x)!).ToList();
            this.Value = (PrimaryExpression) PythonLanguageNode.FromNode(node.ChildByFieldName("value"))!;
        }
    }

    public class TryStatement : PythonLanguageNode, ICompoundStatement
    {
        public Block Body { get; set; }
        public System.Collections.Generic.List<PythonLanguageNode> Children { get; set; }
        public TryStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "try_statement");
            
            this.Body = new Block(node.ChildByFieldName("body"));
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (PythonLanguageNode) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class Tuple : PythonLanguageNode, PrimaryExpression
    {
        public System.Collections.Generic.List<PythonLanguageNode> Children { get; set; }
        public Tuple(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "tuple");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (PythonLanguageNode) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class TuplePattern : PythonLanguageNode, Parameter, Pattern
    {
        public System.Collections.Generic.List<Pattern> Children { get; set; }
        public TuplePattern(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "tuple_pattern");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (Pattern) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class Type : PythonLanguageNode
    {
        public System.Collections.Generic.List<Expression> Children { get; set; }
        public Type(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "type");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (Expression) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class TypedDefaultParameter : PythonLanguageNode, Parameter
    {
        public Identifier Name { get; set; }
        public Type Type { get; set; }
        public Expression Value { get; set; }
        public TypedDefaultParameter(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "typed_default_parameter");
            
            this.Name = new Identifier(node.ChildByFieldName("name"));
            this.Type = new Type(node.ChildByFieldName("type"));
            this.Value = (Expression) PythonLanguageNode.FromNode(node.ChildByFieldName("value"))!;
        }
    }

    public class TypedParameter : PythonLanguageNode, Parameter
    {
        public Type Type { get; set; }
        public System.Collections.Generic.List<PythonLanguageNode> Children { get; set; }
        public TypedParameter(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "typed_parameter");
            
            this.Type = new Type(node.ChildByFieldName("type"));
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (PythonLanguageNode) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class UnaryOperator : PythonLanguageNode, PrimaryExpression
    {
        public PrimaryExpression Argument { get; set; }
        public PythonLanguageNodeTerminalNode Operator { get; set; }
        public UnaryOperator(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "unary_operator");
            
            this.Argument = (PrimaryExpression) PythonLanguageNode.FromNode(node.ChildByFieldName("argument"))!;
            this.Operator = new PythonLanguageNodeTerminalNode(node.ChildByFieldName("operator"));
        }
    }

    public class WhileStatement : PythonLanguageNode, ICompoundStatement
    {
        public ElseClause? Alternative { get; set; }
        public Block Body { get; set; }
        public Expression Condition { get; set; }
        public WhileStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "while_statement");
            
            {
                var tmp = node.ChildByFieldName("alternative");
                this.Alternative = tmp is null ? null : new ElseClause(tmp);
            }
            this.Body = new Block(node.ChildByFieldName("body"));
            this.Condition = (Expression) PythonLanguageNode.FromNode(node.ChildByFieldName("condition"))!;
        }
    }

    public class WildcardImport : PythonLanguageNode
    {
        public WildcardImport(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "wildcard_import");
            
        }
    }

    public class WithClause : PythonLanguageNode
    {
        public System.Collections.Generic.List<WithItem> Children { get; set; }
        public WithClause(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "with_clause");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new WithItem(x)).ToList();
        }
    }

    public class WithItem : PythonLanguageNode
    {
        public Expression Value { get; set; }
        public WithItem(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "with_item");
            
            this.Value = (Expression) PythonLanguageNode.FromNode(node.ChildByFieldName("value"))!;
        }
    }

    public class WithStatement : PythonLanguageNode, ICompoundStatement
    {
        public Block Body { get; set; }
        public System.Collections.Generic.List<WithClause> Children { get; set; }
        public WithStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "with_statement");
            
            this.Body = new Block(node.ChildByFieldName("body"));
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new WithClause(x)).ToList();
        }
    }

    public class Yield : PythonLanguageNode
    {
        public System.Collections.Generic.List<PythonLanguageNode> Children { get; set; }
        public Yield(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "yield");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (PythonLanguageNode) PythonLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class Comment : PythonLanguageNode
    {
        public Comment(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "comment");
            
        }
    }

    public class Ellipsis : PythonLanguageNode, PrimaryExpression
    {
        public Ellipsis(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "ellipsis");
            
        }
    }

    public class EscapeSequence : PythonLanguageNode
    {
        public EscapeSequence(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "escape_sequence");
            
        }
    }

    public class False : PythonLanguageNode, PrimaryExpression
    {
        public False(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "false");
            
        }
    }

    public class Float : PythonLanguageNode, PrimaryExpression
    {
        public Float(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "float");
            
        }
    }

    public class Identifier : PythonLanguageNode, Parameter, Pattern, PrimaryExpression
    {
        public Identifier(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "identifier");
            
        }
    }

    public class Integer : PythonLanguageNode, PrimaryExpression
    {
        public Integer(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "integer");
            
        }
    }

    public class AsPatternTarget : PythonLanguageNode
    {
        public AsPatternTarget(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "as_pattern_target");
            
        }
    }

    public class LineContinuation : PythonLanguageNode
    {
        public LineContinuation(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "line_continuation");
            
        }
    }

    public class None : PythonLanguageNode, PrimaryExpression
    {
        public None(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "none");
            
        }
    }

    public class StringEnd : PythonLanguageNode
    {
        public StringEnd(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "string_end");
            
        }
    }

    public class StringStart : PythonLanguageNode
    {
        public StringStart(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "string_start");
            
        }
    }

    public class True : PythonLanguageNode, PrimaryExpression
    {
        public True(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "true");
            
        }
    }

    public class TypeConversion : PythonLanguageNode
    {
        public TypeConversion(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "type_conversion");
            
        }
    }
}