//----------------------
// <auto-generated>
//     Generated by node_generator.py
//     source: langs-native\tree-sitter-css\src/node-types.json
// </auto-generated>
//----------------------

#nullable enable

using System.Linq;

namespace TreeSitter.Css.Nodes {

    public abstract class CssLanguageNode
    {
        public static CssLanguageNode FromNode(TreeSitter.Node node) {
            if (node is null) throw new System.ArgumentNullException(nameof(node));
            if (!node.IsNamed) return new CssLanguageNodeTerminalNode(node);
            switch (node.Kind) {
                case "keyframes_statement": return new KeyframesStatement(node);
                case "nesting_selector": return new NestingSelector(node);
                case "binary_expression": return new BinaryExpression(node);
                case "id_selector": return new IdSelector(node);
                case "declaration": return new Declaration(node);
                case "attribute_selector": return new AttributeSelector(node);
                case "descendant_selector": return new DescendantSelector(node);
                case "keyframe_block_list": return new KeyframeBlockList(node);
                case "float_value": return new FloatValue(node);
                case "parenthesized_query": return new ParenthesizedQuery(node);
                case "comment": return new Comment(node);
                case "keyframes_name": return new KeyframesName(node);
                case "unit": return new Unit(node);
                case "import_statement": return new ImportStatement(node);
                case "feature_name": return new FeatureName(node);
                case "string_value": return new StringValue(node);
                case "to": return new To(node);
                case "child_selector": return new ChildSelector(node);
                case "universal_selector": return new UniversalSelector(node);
                case "class_selector": return new ClassSelector(node);
                case "feature_query": return new FeatureQuery(node);
                case "integer_value": return new IntegerValue(node);
                case "sibling_selector": return new SiblingSelector(node);
                case "stylesheet": return new Stylesheet(node);
                case "charset_statement": return new CharsetStatement(node);
                case "color_value": return new ColorValue(node);
                case "media_statement": return new MediaStatement(node);
                case "call_expression": return new CallExpression(node);
                case "pseudo_element_selector": return new PseudoElementSelector(node);
                case "namespace_name": return new NamespaceName(node);
                case "important": return new Important(node);
                case "at_keyword": return new AtKeyword(node);
                case "unary_query": return new UnaryQuery(node);
                case "arguments": return new Arguments(node);
                case "class_name": return new ClassName(node);
                case "tag_name": return new TagName(node);
                case "selectors": return new Selectors(node);
                case "function_name": return new FunctionName(node);
                case "property_name": return new PropertyName(node);
                case "plain_value": return new PlainValue(node);
                case "parenthesized_value": return new ParenthesizedValue(node);
                case "supports_statement": return new SupportsStatement(node);
                case "adjacent_sibling_selector": return new AdjacentSiblingSelector(node);
                case "at_rule": return new AtRule(node);
                case "from": return new From(node);
                case "binary_query": return new BinaryQuery(node);
                case "pseudo_class_selector": return new PseudoClassSelector(node);
                case "rule_set": return new RuleSet(node);
                case "keyword_query": return new KeywordQuery(node);
                case "selector_query": return new SelectorQuery(node);
                case "id_name": return new IdName(node);
                case "keyframe_block": return new KeyframeBlock(node);
                case "block": return new Block(node);
                case "attribute_name": return new AttributeName(node);
                case "namespace_statement": return new NamespaceStatement(node);
                case "ERROR": return new ErrorNode(node);
                default: throw new System.ArgumentException("unknown node type: " + node.Kind, nameof(node));
            }
        }

    
        public string Kind { get; set; }

        protected CssLanguageNode(TreeSitter.Node node)
        {
            Kind = node.Kind;
        }
    }
    
    public class CssLanguageNodeTerminalNode : CssLanguageNode
    {
        public CssLanguageNodeTerminalNode(TreeSitter.Node node) : base(node)
        {
        }
    }
    
    public class ErrorNode : CssLanguageNode
    {
        public ErrorNode(TreeSitter.Node node) : base(node)
        {
        }
    }

    public class AdjacentSiblingSelector : CssLanguageNode
    {
        public System.Collections.Generic.List<CssLanguageNode> Children { get; set; }
        public AdjacentSiblingSelector(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "adjacent_sibling_selector");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CssLanguageNode) CssLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class Arguments : CssLanguageNode
    {
        public System.Collections.Generic.List<CssLanguageNode> Children { get; set; }
        public Arguments(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "arguments");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CssLanguageNode) CssLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class AtRule : CssLanguageNode
    {
        public System.Collections.Generic.List<CssLanguageNode> Children { get; set; }
        public AtRule(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "at_rule");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CssLanguageNode) CssLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class AttributeSelector : CssLanguageNode
    {
        public System.Collections.Generic.List<CssLanguageNode> Children { get; set; }
        public AttributeSelector(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "attribute_selector");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CssLanguageNode) CssLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class BinaryExpression : CssLanguageNode
    {
        public System.Collections.Generic.List<CssLanguageNode> Children { get; set; }
        public BinaryExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "binary_expression");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CssLanguageNode) CssLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class BinaryQuery : CssLanguageNode
    {
        public System.Collections.Generic.List<CssLanguageNode> Children { get; set; }
        public BinaryQuery(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "binary_query");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CssLanguageNode) CssLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class Block : CssLanguageNode
    {
        public System.Collections.Generic.List<CssLanguageNode> Children { get; set; }
        public Block(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "block");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CssLanguageNode) CssLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class CallExpression : CssLanguageNode
    {
        public System.Collections.Generic.List<CssLanguageNode> Children { get; set; }
        public CallExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "call_expression");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CssLanguageNode) CssLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class CharsetStatement : CssLanguageNode
    {
        public System.Collections.Generic.List<CssLanguageNode> Children { get; set; }
        public CharsetStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "charset_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CssLanguageNode) CssLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ChildSelector : CssLanguageNode
    {
        public System.Collections.Generic.List<CssLanguageNode> Children { get; set; }
        public ChildSelector(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "child_selector");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CssLanguageNode) CssLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ClassSelector : CssLanguageNode
    {
        public System.Collections.Generic.List<CssLanguageNode> Children { get; set; }
        public ClassSelector(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "class_selector");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CssLanguageNode) CssLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ColorValue : CssLanguageNode
    {
        public ColorValue(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "color_value");
            
        }
    }

    public class Declaration : CssLanguageNode
    {
        public System.Collections.Generic.List<CssLanguageNode> Children { get; set; }
        public Declaration(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "declaration");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CssLanguageNode) CssLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class DescendantSelector : CssLanguageNode
    {
        public System.Collections.Generic.List<CssLanguageNode> Children { get; set; }
        public DescendantSelector(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "descendant_selector");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CssLanguageNode) CssLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class FeatureQuery : CssLanguageNode
    {
        public System.Collections.Generic.List<CssLanguageNode> Children { get; set; }
        public FeatureQuery(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "feature_query");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CssLanguageNode) CssLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class FloatValue : CssLanguageNode
    {
        public System.Collections.Generic.List<Unit> Children { get; set; }
        public FloatValue(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "float_value");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Unit(x)).ToList();
        }
    }

    public class IdSelector : CssLanguageNode
    {
        public System.Collections.Generic.List<CssLanguageNode> Children { get; set; }
        public IdSelector(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "id_selector");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CssLanguageNode) CssLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ImportStatement : CssLanguageNode
    {
        public System.Collections.Generic.List<CssLanguageNode> Children { get; set; }
        public ImportStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "import_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CssLanguageNode) CssLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class IntegerValue : CssLanguageNode
    {
        public System.Collections.Generic.List<Unit> Children { get; set; }
        public IntegerValue(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "integer_value");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Unit(x)).ToList();
        }
    }

    public class KeyframeBlock : CssLanguageNode
    {
        public System.Collections.Generic.List<CssLanguageNode> Children { get; set; }
        public KeyframeBlock(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "keyframe_block");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CssLanguageNode) CssLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class KeyframeBlockList : CssLanguageNode
    {
        public System.Collections.Generic.List<KeyframeBlock> Children { get; set; }
        public KeyframeBlockList(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "keyframe_block_list");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new KeyframeBlock(x)).ToList();
        }
    }

    public class KeyframesStatement : CssLanguageNode
    {
        public System.Collections.Generic.List<CssLanguageNode> Children { get; set; }
        public KeyframesStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "keyframes_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CssLanguageNode) CssLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class MediaStatement : CssLanguageNode
    {
        public System.Collections.Generic.List<CssLanguageNode> Children { get; set; }
        public MediaStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "media_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CssLanguageNode) CssLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class NamespaceStatement : CssLanguageNode
    {
        public System.Collections.Generic.List<CssLanguageNode> Children { get; set; }
        public NamespaceStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "namespace_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CssLanguageNode) CssLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ParenthesizedQuery : CssLanguageNode
    {
        public System.Collections.Generic.List<CssLanguageNode> Children { get; set; }
        public ParenthesizedQuery(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "parenthesized_query");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CssLanguageNode) CssLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ParenthesizedValue : CssLanguageNode
    {
        public System.Collections.Generic.List<CssLanguageNode> Children { get; set; }
        public ParenthesizedValue(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "parenthesized_value");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CssLanguageNode) CssLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class PseudoClassSelector : CssLanguageNode
    {
        public System.Collections.Generic.List<CssLanguageNode> Children { get; set; }
        public PseudoClassSelector(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "pseudo_class_selector");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CssLanguageNode) CssLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class PseudoElementSelector : CssLanguageNode
    {
        public System.Collections.Generic.List<CssLanguageNode> Children { get; set; }
        public PseudoElementSelector(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "pseudo_element_selector");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CssLanguageNode) CssLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class RuleSet : CssLanguageNode
    {
        public System.Collections.Generic.List<CssLanguageNode> Children { get; set; }
        public RuleSet(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "rule_set");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CssLanguageNode) CssLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class SelectorQuery : CssLanguageNode
    {
        public System.Collections.Generic.List<CssLanguageNode> Children { get; set; }
        public SelectorQuery(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "selector_query");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CssLanguageNode) CssLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class Selectors : CssLanguageNode
    {
        public System.Collections.Generic.List<CssLanguageNode> Children { get; set; }
        public Selectors(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "selectors");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CssLanguageNode) CssLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class SiblingSelector : CssLanguageNode
    {
        public System.Collections.Generic.List<CssLanguageNode> Children { get; set; }
        public SiblingSelector(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "sibling_selector");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CssLanguageNode) CssLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class Stylesheet : CssLanguageNode
    {
        public System.Collections.Generic.List<CssLanguageNode> Children { get; set; }
        public Stylesheet(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "stylesheet");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CssLanguageNode) CssLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class SupportsStatement : CssLanguageNode
    {
        public System.Collections.Generic.List<CssLanguageNode> Children { get; set; }
        public SupportsStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "supports_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CssLanguageNode) CssLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class UnaryQuery : CssLanguageNode
    {
        public System.Collections.Generic.List<CssLanguageNode> Children { get; set; }
        public UnaryQuery(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "unary_query");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CssLanguageNode) CssLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class UniversalSelector : CssLanguageNode
    {
        public UniversalSelector(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "universal_selector");
            
        }
    }

    public class AtKeyword : CssLanguageNode
    {
        public AtKeyword(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "at_keyword");
            
        }
    }

    public class AttributeName : CssLanguageNode
    {
        public AttributeName(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "attribute_name");
            
        }
    }

    public class ClassName : CssLanguageNode
    {
        public ClassName(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "class_name");
            
        }
    }

    public class Comment : CssLanguageNode
    {
        public Comment(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "comment");
            
        }
    }

    public class FeatureName : CssLanguageNode
    {
        public FeatureName(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "feature_name");
            
        }
    }

    public class From : CssLanguageNode
    {
        public From(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "from");
            
        }
    }

    public class FunctionName : CssLanguageNode
    {
        public FunctionName(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "function_name");
            
        }
    }

    public class IdName : CssLanguageNode
    {
        public IdName(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "id_name");
            
        }
    }

    public class Important : CssLanguageNode
    {
        public Important(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "important");
            
        }
    }

    public class KeyframesName : CssLanguageNode
    {
        public KeyframesName(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "keyframes_name");
            
        }
    }

    public class KeywordQuery : CssLanguageNode
    {
        public KeywordQuery(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "keyword_query");
            
        }
    }

    public class NamespaceName : CssLanguageNode
    {
        public NamespaceName(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "namespace_name");
            
        }
    }

    public class NestingSelector : CssLanguageNode
    {
        public NestingSelector(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "nesting_selector");
            
        }
    }

    public class PlainValue : CssLanguageNode
    {
        public PlainValue(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "plain_value");
            
        }
    }

    public class PropertyName : CssLanguageNode
    {
        public PropertyName(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "property_name");
            
        }
    }

    public class StringValue : CssLanguageNode
    {
        public StringValue(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "string_value");
            
        }
    }

    public class TagName : CssLanguageNode
    {
        public TagName(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "tag_name");
            
        }
    }

    public class To : CssLanguageNode
    {
        public To(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "to");
            
        }
    }

    public class Unit : CssLanguageNode
    {
        public Unit(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "unit");
            
        }
    }
}